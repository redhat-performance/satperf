---
# Check variables
- name: "Make sure only one Satellite is specified"
  ansible.builtin.assert:
    that: "groups['satellite6'] | length == 1"
    msg: "Satellite not specified or too many of them specified"
  when:
    - "'satellite6' in groups"
    - ignore_satellite is not defined or ignore_satellite != 'true'

- name: "Get group name of current location"
  ansible.builtin.set_fact:
    location_groupname: "location_{{ location | lower }}"

# Make sure we have key deployed
- name: "Deploy key"
  ansible.posix.authorized_key:
    user: root
    key: "{{ lookup('ansible.builtin.file', '../../../../../{{ ansible_ssh_private_key_file }}.pub') }}"
    manage_dir: yes

# Check default in /etc/hosts file
- name: "We need localhost (IPv4) in hosts file"
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    regexp: '^127\.0\.0\.1\s+localhost localhost\.localdomain localhost4 localhost4\.localdomain4$'
    line: "127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4"
    state: present

- name: "We need localhost (IPv6) in hosts file"
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    regexp: '^::1\s+localhost localhost\.localdomain localhost6 localhost6\.localdomain6$'
    line: "::1   localhost localhost.localdomain localhost6 localhost6.localdomain6"
    state: present

- name: "Build own entry in hosts file (using public network IPs)"
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    line: "{{ public_ip }} {{ inventory_hostname }}"
    state: present
  when:
    - public_ip is defined

- name: "Build own entry in hosts file (using private network IPs)"
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    line: "{{ private_ip }} {{ inventory_hostname }}"
    state: present
  when:
    - public_ip is not defined
    - private_ip is defined

- name: "Build Satellite hosts file (using public network IPs) - Capsules entries"
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    line: "{{ hostvars[item].public_ip }} {{ item }}"
    state: present
  with_items: "{{ groups['capsules'] }}"
  when:
    - "'satellite6' in group_names"
    - hostvars[item].public_ip is defined
    - private_ip is not defined or
      private_netmask is not defined or
      hostvars[item].private_ip is not defined or
      hostvars[item].private_netmask is not defined or
      (private_ip is defined and
       private_netmask is defined and
       hostvars[item].private_ip is defined and
       hostvars[item].private_netmask is defined and
       (private_ip + '/' + private_netmask) | ansible.utils.ipaddr('network/prefix') !=
       (hostvars[item].private_ip + '/' + hostvars[item].private_netmask) | ansible.utils.ipaddr('network/prefix'))

- name: "Build Satellite hosts file (using private network IPs) - Capsules entries"
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    line: "{{ hostvars[item].private_ip }} {{ item }}"
    state: present
  with_items: "{{ groups['capsules'] }}"
  when:
    - "'satellite6' in group_names"
    - private_ip is defined
    - private_netmask is defined
    - hostvars[item].private_ip is defined
    - hostvars[item].private_netmask is defined
    - "(private_ip + '/' + private_netmask) | ansible.utils.ipaddr('network/prefix') ==
       (hostvars[item].private_ip + '/' + hostvars[item].private_netmask) | ansible.utils.ipaddr('network/prefix')"

- name: "Build capsules hosts file (using public network IPs) - Satellite entry"
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    line: "{{ hostvars[item].public_ip }} {{ item }}"
    state: present
  with_items: "{{ groups['satellite6'] }}"
  when:
    - "'capsules' in group_names"
    - hostvars[item].public_ip is defined
    - private_ip is not defined or
      private_netmask is not defined or
      hostvars[item].private_ip is not defined or
      hostvars[item].private_netmask is not defined or
      (private_ip is defined and
       private_netmask is defined and
       hostvars[item].private_ip is defined and
       hostvars[item].private_netmask is defined and
       (private_ip + '/' + private_netmask) | ansible.utils.ipaddr('network/prefix') !=
       (hostvars[item].private_ip + '/' + hostvars[item].private_netmask) | ansible.utils.ipaddr('network/prefix'))

- name: "Build capsules hosts file (using private network IPs) - Satellite entry"
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    line: "{{ hostvars[item].private_ip }} {{ item }}"
    state: present
  with_items: "{{ groups['satellite6'] }}"
  when:
    - "'capsules' in group_names"
    - private_ip is defined
    - private_netmask is defined
    - hostvars[item].private_ip is defined
    - hostvars[item].private_netmask is defined
    - "(private_ip + '/' + private_netmask) | ansible.utils.ipaddr('network/prefix') ==
       (hostvars[item].private_ip + '/' + hostvars[item].private_netmask) | ansible.utils.ipaddr('network/prefix')"

- name: "Build container hosts hosts file (using public network IPs) - Registration target entries)"
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    line: "{{ hostvars[item].public_ip }} {{ item }}"
    state: present
  with_items: "{{ groups['capsule_lbs'] | union(groups['capsules'] | union(groups['satellite6'])) | intersect(groups[location_groupname]) }}"
  when:
    - "'container_hosts' in group_names"
    - hostvars[item].public_ip is defined
    - private_ip is not defined or
      private_netmask is not defined or
      hostvars[item].private_ip is not defined or
      hostvars[item].private_netmask is not defined or
      (private_ip is defined and
       private_netmask is defined and
       hostvars[item].private_ip is defined and
       hostvars[item].private_netmask is defined and
       (private_ip + '/' + private_netmask) | ansible.utils.ipaddr('network/prefix') !=
       (hostvars[item].private_ip + '/' + hostvars[item].private_netmask) | ansible.utils.ipaddr('network/prefix'))

- name: "Build container hosts hosts file (using private network IPs) - Registration target entries)"
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    line: "{{ hostvars[item].private_ip }} {{ item }}"
    state: present
  with_items: "{{ groups['capsule_lbs'] | union(groups['capsules'] | union(groups['satellite6'])) | intersect(groups[location_groupname]) }}"
  when:
    - "'container_hosts' in group_names"
    - private_ip is defined
    - private_netmask is defined
    - hostvars[item].private_ip is defined
    - hostvars[item].private_netmask is defined
    - "(private_ip + '/' + private_netmask) | ansible.utils.ipaddr('network/prefix') ==
       (hostvars[item].private_ip + '/' + hostvars[item].private_netmask) | ansible.utils.ipaddr('network/prefix')"

- name: "Build load balancers hosts file (using public network IPs) - Capsules entries)"
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    regexp: ".*{{ item }}$"
    line: "{{ hostvars[item].public_ip }} {{ item }}"
    state: present
  with_items: "{{ groups['capsules'] | intersect(groups[location_groupname]) }}"
  when:
    - "'capsule_lbs' in group_names"
    - hostvars[item].public_ip is defined
    - private_ip is not defined or
      private_netmask is not defined or
      hostvars[item].private_ip is not defined or
      hostvars[item].private_netmask is not defined or
      (private_ip is defined and
       private_netmask is defined and
       hostvars[item].private_ip is defined and
       hostvars[item].private_netmask is defined and
       (private_ip + '/' + private_netmask) | ansible.utils.ipaddr('network/prefix') !=
       (hostvars[item].private_ip + '/' + hostvars[item].private_netmask) | ansible.utils.ipaddr('network/prefix'))

- name: "Build load balancers hosts file (using private network IPs) - Capsules entries)"
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    line: "{{ hostvars[item].private_ip }} {{ item }}"
    state: present
  with_items: "{{ groups['capsules'] | intersect(groups[location_groupname]) }}"
  when:
    - "'capsule_lbs' in group_names"
    - private_ip is defined
    - private_netmask is defined
    - hostvars[item].private_ip is defined
    - hostvars[item].private_netmask is defined
    - "(private_ip + '/' + private_netmask) | ansible.utils.ipaddr('network/prefix') ==
       (hostvars[item].private_ip + '/' + hostvars[item].private_netmask) | ansible.utils.ipaddr('network/prefix')"

- name: "Build own entry in hosts file (using public network IPv6 IPs)"
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    line: "{{ public_ip6 }} {{ inventory_hostname }}"
    state: present
  when:
    - public_ip6 is defined

- name: "Build own entry in hosts file (using private network IPv6 IPs)"
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    line: "{{ private_ip6 }} {{ inventory_hostname }}"
    state: present
  when:
    - public_ip6 is not defined
    - private_ip6 is defined

- name: "Build Satellite hosts file (using public network IPv6 IPs) - Capsules entries"
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    line: "{{ hostvars[item].public_ip6 }} {{ item }}"
    state: present
  with_items: "{{ groups['capsules'] }}"
  when:
    - "'satellite6' in group_names"
    - hostvars[item].public_ip6 is defined
    - private_ip6 is not defined or
      private_netmask6 is not defined or
      hostvars[item].private_ip6 is not defined or
      hostvars[item].private_netmask6 is not defined or
      (private_ip6 is defined and
       private_netmask6 is defined and
       hostvars[item].private_ip6 is defined and
       hostvars[item].private_netmask6 is defined and
       (private_ip6 + '/' + (private_netmask6 | string)) | ansible.utils.ipaddr('network/prefix') !=
       (hostvars[item].private_ip6 + '/' + (hostvars[item].private_netmask6 | string)) | ansible.utils.ipaddr('network/prefix'))

- name: "Build Satellite hosts file (using private network IPv6 IPs) - Capsules entries"
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    line: "{{ hostvars[item].private_ip6 }} {{ item }}"
    state: present
  with_items: "{{ groups['capsules'] }}"
  when:
    - "'satellite6' in group_names"
    - private_ip6 is defined
    - hostvars[item].private_ip6 is defined
    - "(private_ip6 + '/' + (private_netmask6 | string)) | ansible.utils.ipaddr('network/prefix') ==
       (hostvars[item].private_ip6 + '/' + (private_netmask6 | string)) | ansible.utils.ipaddr('network/prefix')"

- name: "Build capsules hosts file (using public network IPv6 IPs) - Satellite entry"
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    line: "{{ hostvars[item].public_ip6 }} {{ item }}"
    state: present
  with_items: "{{ groups['satellite6'] }}"
  when:
    - "'capsules' in group_names"
    - hostvars[item].public_ip6 is defined
    - private_ip6 is not defined or
      private_netmask6 is not defined or
      hostvars[item].private_ip6 is not defined or
      hostvars[item].private_netmask6 is not defined or
      (private_ip6 is defined and
       private_netmask6 is defined and
       hostvars[item].private_ip6 is defined and
       hostvars[item].private_netmask6 is defined and
       (private_ip6 + '/' + (private_netmask6 | string)) | ansible.utils.ipaddr('network/prefix') !=
       (hostvars[item].private_ip6 + '/' + (hostvars[item].private_netmask6 | string)) | ansible.utils.ipaddr('network/prefix'))

- name: "Build capsules hosts file (using private network IPv6 IPs) - Satellite entry"
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    line: "{{ hostvars[item].private_ip6 }} {{ item }}"
    state: present
  with_items: "{{ groups['satellite6'] }}"
  when:
    - "'capsules' in group_names"
    - private_ip6 is defined
    - hostvars[item].private_ip6 is defined
    - "(private_ip6 + '/' + (private_netmask6 | string)) | ansible.utils.ipaddr('network/prefix') ==
       (hostvars[item].private_ip6 + '/' + (private_netmask6 | string)) | ansible.utils.ipaddr('network/prefix')"

- name: "Build container hosts hosts file (using public network IPv6 IPs) - Registration target entries)"
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    line: "{{ hostvars[item].public_ip6 }} {{ item }}"
    state: present
  with_items: "{{ groups['capsule_lbs'] | union(groups['capsules'] | union(groups['satellite6'])) | intersect(groups[location_groupname]) }}"
  when:
    - "'container_hosts' in group_names"
    - hostvars[item].public_ip6 is defined
    - private_ip6 is not defined or
      private_netmask6 is not defined or
      hostvars[item].private_ip6 is not defined or
      hostvars[item].private_netmask6 is not defined or
      (private_ip6 is defined and
       private_netmask6 is defined and
       hostvars[item].private_ip6 is defined and
       hostvars[item].private_netmask6 is defined and
       (private_ip6 + '/' + (private_netmask6 | string)) | ansible.utils.ipaddr('network/prefix') !=
       (hostvars[item].private_ip6 + '/' + (hostvars[item].private_netmask6 | string)) | ansible.utils.ipaddr('network/prefix'))

- name: "Build container hosts hosts file (using private network IPv6 IPs) - Registration target entries)"
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    line: "{{ hostvars[item].private_ip6 }} {{ item }}"
    state: present
  with_items: "{{ groups['capsule_lbs'] | union(groups['capsules'] | union(groups['satellite6'])) | intersect(groups[location_groupname]) }}"
  when:
    - "'container_hosts' in group_names"
    - private_ip6 is defined
    - hostvars[item].private_ip6 is defined
    - "(private_ip6 + '/' + (private_netmask6 | string)) | ansible.utils.ipaddr('network/prefix') ==
       (hostvars[item].private_ip6 + '/' + (private_netmask6 | string)) | ansible.utils.ipaddr('network/prefix')"

- name: "Build load balancers hosts file (using public network IPv6 IPs) - Capsules entries)"
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    line: "{{ hostvars[item].public_ip6 }} {{ item }}"
    state: present
  with_items: "{{ groups['capsules'] | intersect(groups[location_groupname]) }}"
  when:
    - "'capsule_lbs' in group_names"
    - hostvars[item].public_ip6 is defined
    - private_ip6 is not defined or
      private_netmask6 is not defined or
      hostvars[item].private_ip6 is not defined or
      hostvars[item].private_netmask6 is not defined or
      (private_ip6 is defined and
       private_netmask6 is defined and
       hostvars[item].private_ip6 is defined and
       hostvars[item].private_netmask6 is defined and
       (private_ip6 + '/' + (private_netmask6 | string)) | ansible.utils.ipaddr('network/prefix') !=
       (hostvars[item].private_ip6 + '/' + (hostvars[item].private_netmask6 | string)) | ansible.utils.ipaddr('network/prefix'))

- name: "Build load balancers hosts file (using private network IPv6 IPs) - Capsules entries)"
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    line: "{{ hostvars[item].private_ip6 }} {{ item }}"
    state: present
  with_items: "{{ groups['capsules'] | intersect(groups[location_groupname]) }}"
  when:
    - "'capsule_lbs' in group_names"
    - private_ip6 is defined
    - hostvars[item].private_ip6 is defined
    - "(private_ip6 + '/' + (private_netmask6 | string)) | ansible.utils.ipaddr('network/prefix') ==
       (hostvars[item].private_ip6 + '/' + (private_netmask6 | string)) | ansible.utils.ipaddr('network/prefix')"

- name: "File /etc/hosts have correct SELinux context (had issues before)"
  ansible.builtin.command:
    cmd: |
      restorecon -vR /etc/hosts

# Check SELinux
- name: "SELinux is in {{ system_selinux_state }} with {{ system_selinux_policy }} policy"
  ansible.posix.selinux:
    policy: "{{ system_selinux_policy }}"
    state: "{{ system_selinux_state }}"

# Make sure hostname is set
- name: "Set hostname"
  ansible.builtin.hostname:
    name: "{{ inventory_hostname }}"

# Sanity check our networking setup
- name: "We can ping 127.0.0.1"
  ansible.builtin.wait_for:
    host: 127.0.0.1
    port: 22
    timeout: 3

- name: "We can ping ::1"
  ansible.builtin.wait_for:
    host: ::1
    port: 22
    timeout: 3

- name: "We can ping localhost"
  ansible.builtin.wait_for:
    host: localhost
    port: 22
    timeout: 3

- name: "We can ping redhat.com"
  ansible.builtin.wait_for:
    host: redhat.com
    port: 443
    timeout: 10

- name: "We can ping Satellite from Satellite / Capsules"
  ansible.builtin.wait_for:
    host: "{{ groups['satellite6'] | first }}"
    port: 22
    timeout: 30
  when:
    - "'satellite6' in group_names or 'capsules' in group_names"
    - ignore_satellite is not defined or ignore_satellite != 'true'

- name: "We can ping registration target from Container hosts"
  ansible.builtin.wait_for:
    host: "{{ tests_registration_target }}"
    port: 22
    timeout: 60
  when:
    - "'container_hosts' in group_names"

- name: "We can ping NTP server"
  ansible.builtin.command:
    cmd: |
      ping -c 3 "{{ (timesync_ntp_servers | first).hostname }}"
  register: cmd
  retries: 5
  delay: 3
  until: cmd is succeeded

# Sanity check yum config
- name: "Command yum repolist returns"
  ansible.builtin.command:
    cmd: |
      yum repolist

- name: "Persist journal data"
  ansible.builtin.file:
    path: /var/log/journal
    state: directory

- name: Enable sshd root login
  ansible.builtin.copy:
    dest: /etc/ssh/sshd_config.d/PermitRootLogin_yes.conf
    content: |
      PermitRootLogin yes

- name: Reload sshd
  ansible.builtin.systemd_service:
    name: sshd
    state: reloaded
...
