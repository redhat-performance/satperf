---
- name: "Register containers against a registration target"
  hosts: container_hosts
  gather_facts: false
  vars:
    size: 10   # TODO: would be nice to provide total expected number and that would be divided by number of container hosts
    num_retry_forks: 3
    registration_logs: "registration_logs"
    re_register_failed_hosts: false
    profile: false
    concurrent_registrations: 100
    registration_profile_img: registration_profile.svg
    debug_rhsm: false
    enable_iop: false
  tasks:
    - name: "Set default variable(s) values"
      ansible.builtin.set_fact:
        location: "{{ location | default('{{ sat_loc }}') | default('Default Location') }}"

    - name: "Get group name of the location(s)"
      ansible.builtin.set_fact:
        location_groupname: "location_{{ location | lower }}"

    - name: "Check whether we have already registered some containers"
      ansible.builtin.stat:
        path: /root/container-used-count
      register: container_used_count_path

    - name: "Set number of used containers to 0"
      ansible.builtin.set_fact:
        containers_used_count: 0
      when:
        - not container_used_count_path.stat.exists

    - name: "Load number of already registered containers"
      ansible.builtin.command:
        cmd: |
          cat /root/container-used-count
      register: containers_used_count_cmd
      ignore_errors: true
      when:
        - container_used_count_path.stat.exists

    - name: "Set number of used containers based on file contents"
      ansible.builtin.set_fact:
        containers_used_count: "{{ containers_used_count_cmd.stdout }}"   # Warning: this is still a string: https://github.com/ansible/ansible/issues/15249
      when:
        - container_used_count_path.stat.exists

    - name: "Ensure we have enough free containers"
      ansible.builtin.assert:
        that: "containers_used_count | int < containers_count | int"

    - name: "Generate list of containers we are going to use"
      ansible.builtin.shell:
        cmd: |
          awk 'NR > {{ containers_used_count | int }} && NR <= {{ containers_used_count | int + size | int }} {print $NF}' \
            /root/container-ips.shuffled \
            >clients.ini

    - name: Set base log name
      ansible.builtin.set_fact:
        clients_yaml_cmd_base: "/root/out-{{ lookup('pipe', 'date -u -Iseconds') | regex_replace('[^A-Za-z0-9-]', '_') }}"
      run_once: true

    - name: Set `host-registration_prepare.yaml` log name
      ansible.builtin.set_fact:
        host_registration_prepare_cmd_log: "{{ clients_yaml_cmd_base }}_prepare.log"
      run_once: true

    - name: Run `host-registration_prepare.yaml`
      ansible.builtin.shell:
        cmd: |
          ansible-playbook \
            --private-key /root/id_rsa_key \
            --forks {{ size }} \
            --inventory clients.ini \
            -e "enable_iop='$enable_iop'" \
            host-registration_prepare.yaml |
            tee {{ host_registration_prepare_cmd_log }}
      register: host_registration_prepare_cmd
      ignore_errors: true

    - name: Try to patch `rhsm/connection.py` to add some error logging
      ansible.builtin.shell:
        cmd: |
          ansible \
            --private-key /root/id_rsa_key \
            --inventory clients.ini \
            -m ansible.builtin.shell \
            -a 'sed -i.orig -e "/\# This really needs an exception mapper too\.\.\./i \
            \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ log.error(\"Response content: %s\" % response[\"content\"])" \
            /usr/lib64/python3.*/site-packages/rhsm/connection.py' \
            all |
            tee patch_rhsm_{{ size }}.log
      when:
        - debug_rhsm

    - name: Create profiling directory
      ansible.builtin.file:
        path: /root/profile
        state: directory
        mode: '0700'
      delegate_to: "{{ groups['satellite6'] | first }}"
      run_once: true
      when:
        - profile

    - name: Start gathering BPF profile
      ansible.builtin.shell:
        cmd: |
          /usr/share/bcc/tools/profile \
            -adf \
            --stack-storage-size 1638400 \
            >/root/profile/out-{{ concurrent_registrations }}.profile-folded
      delegate_to: "{{ groups['satellite6'] | first }}"
      async: 1800
      poll: 0
      run_once: true
      ignore_errors: true
      when:
        - profile

    - name: Set `host-registration.yaml` log name
      ansible.builtin.set_fact:
        clients_yaml_cmd_log: "{{ clients_yaml_cmd_base }}.log"

    - name: Run `host-registration.yaml` (log = {{ clients_yaml_cmd_log }})
      ansible.builtin.shell:
        cmd: |
          ansible-playbook \
            --private-key /root/id_rsa_key \
            --forks {{ size }} \
            --inventory clients.ini \
            -e "enable_iop='$enable_iop'" \
            host-registration.yaml |
            tee {{ clients_yaml_cmd_log }}
      ignore_errors: true

    - name: Kill BPF profile process
      ansible.builtin.command:
        cmd: |
          pkill -SIGINT profile
      delegate_to: "{{ groups['satellite6'] | first }}"
      run_once: true
      ignore_errors: true
      when:
        - profile

    - name: Fetch client logs
      ansible.builtin.fetch:
        src: "{{ clients_yaml_cmd_log }}"
        dest: "{{ registration_logs }}"
      ignore_errors: true

    - name: Get how long registration took
      ansible.builtin.shell:
        cmd: |
          set -o pipefail

          grep '"msg". "Register' {{ clients_yaml_cmd_log }} | cut -d '"' -f 4
      register: clients_yaml_grepper_timings
      ignore_errors: true

    - name: "Append registration timings to central list"
      ansible.builtin.set_fact:
        grepper_times: "{{ grepper_times | default([]) + hostvars[item]['clients_yaml_grepper_timings']['stdout_lines'] }}"
      with_items: "{{ ansible_play_batch }}"
      run_once: true

    - name: "Show how long registration took"
      ansible.builtin.debug:
        var: grepper_times
      run_once: true

    - name: "Show number of successful registration events"
      ansible.builtin.debug:
        var: grepper_times | length
      run_once: true

    - name: "Increment number of already registered containers"
      ansible.builtin.lineinfile:
        path: /root/container-used-count
        regexp: .*
        line: "{{ containers_used_count | int + size | int }}"
        create: true

    - name: "Get number of hosts that failed to register"
      ansible.builtin.shell:
        cmd: |
          grep -c \
            -e ^'fatal: ' \
            -e ^'        "Traceback ' \
            -e ^'        "curl: ' \
            -e ' initial configuration failed' \
            -e ^'        "Internal Server Error",'$ \
            -e 'ERROR: ' \
            -e ^'Error: Failed to download metadata for repo' \
            {{ clients_yaml_cmd_log }}
      register: num_failed_hosts
      failed_when: num_failed_hosts.rc == 2

    - name: "Show number of hosts that failed to register"
      ansible.builtin.debug:
        var: num_failed_hosts.stdout_lines

    - name: Convert BPF profile output to image
      ansible.builtin.shell:
        cmd: |
          flamegraph.pl \
            --minwidth 5 \
            --width 2500 \
            /root/profile/out-{{ concurrent_registrations }}.profile-folded \
            >/root/profile/registration_profile-{{ concurrent_registrations }}.svg
      delegate_to: "{{ groups['satellite6'] | first }}"
      run_once: true
      ignore_errors: true
      when:
        - profile

    - name: Fetch BPF profile image
      ansible.builtin.fetch:
        src: /root/profile/registration_profile-{{ concurrent_registrations }}.svg
        dest: "{{ registration_logs }}/../{{ registration_profile_img }}"
        flat: true
      delegate_to: "{{ groups['satellite6'] | first }}"
      run_once: true
      ignore_errors: true
      when:
        - profile

    - name: "Try to show errors in /var/log/rhsm/rhsm.log when log file shows rhsm related errors"
      ansible.builtin.shell:
        cmd: |
          set -o pipefail

          for client_ip in $(awk '/^fatal: .* \/var\/log\/rhsm\/rhsm.log / {print $2}' {{ clients_yaml_cmd_log }}" |
            cut -d'[' -f2 | cut -d']' -f1); do
              ansible \
                --private-key /root/id_rsa_key \
                --inventory ${client_ip}, \
                -m ansible.builtin.command \
                -a "cat /var/log/rhsm/rhsm.log" \
                all |
                tee rhsm_${client_ip}.log
          done
      ignore_errors: true
      when:
        - num_failed_hosts.stdout_lines[0] | int > 0
        - debug_rhsm

    - name: "Set additional retries log name (if needed)"
      ansible.builtin.set_fact:
        clients_yaml_cmd_retries_log: "{{ clients_yaml_cmd_base }}-retries.log"
      when:
        - num_failed_hosts.stdout_lines[0] | int > 0
        - re_register_failed_hosts is defined and re_register_failed_hosts

    - name: "Try to re-register failed hosts (if needed)"
      ansible.builtin.shell:
        cmd: |
          set -o pipefail

          cp -p {{ clients_yaml_cmd_log }} {{ clients_yaml_cmd_retries_log }}

          while (( "$(grep -c \
            -e ^'fatal: ' \
            -e ^'        "Traceback ' \
            -e ^'        "curl: ' \
            -e ' initial configuration failed' \
            -e ^'        "Internal Server Error",'$ \
            -e 'ERROR: ' \
            -e ^'Error: Failed to download metadata for repo' \
            {{ clients_yaml_cmd_retries_log }})" != 0 )); do
              num_fails="$(grep -c \
                -e ^'fatal: ' \
                -e ^'        "Traceback ' \
                -e ^'        "curl: ' \
                -e ' initial configuration failed' \
                -e ^'        "Internal Server Error",'$ \
                -e 'ERROR: ' \
                -e ^'Error: Failed to download metadata for repo' \
                {{ clients_yaml_cmd_retries_log }})"
              iter_clients_yaml_cmd_retries_log="{{ clients_yaml_cmd_retries_log }}.${num_fails}"

              cp -p {{ clients_yaml_cmd_retries_log }} ${iter_clients_yaml_cmd_retries_log}

              unset CLIENT_IP_LIST

              for client_ip in $(awk '/^fatal: / {print $2}' ${iter_clients_yaml_cmd_retries_log} |
                cut -d'[' -f2 | cut -d']' -f1); do
                  CLIENT_IP_LIST+="${client_ip},"
              done

              for client_ip in $(grep \
                -e ^'ok:' \
                -e ^'        "Traceback ' \
                -e ^'        "curl: ' \
                -e ' initial configuration failed' \
                -e ^'        "Internal Server Error",'$ \
                -e 'ERROR: ' \
                -e ^'Error: Failed to download metadata for repo' \
                $iter_clients_yaml_cmd_retries_log |
                uniq | grep -B1 \
                -e ^'        "Traceback ' \
                -e ^'        "curl: ' \
                -e ' initial configuration failed' \
                -e ^'        "Internal Server Error",'$ \
                -e 'ERROR: ' \
                -e ^'Error: Failed to download metadata for repo' |
                awk -F'[' '/ok:/ {print $2}' | cut -d']' -f1); do
                  CLIENT_IP_LIST+="${client_ip},"
              done

              ansible-playbook \
                --private-key /root/id_rsa_key \
                --inventory ${CLIENT_IP_LIST} \
                --forks {{ num_retry_forks }} \
                -e "enable_iop='$enable_iop'" \
                host-registration.yaml \
                &> {{ clients_yaml_cmd_retries_log }}
          done
      register: clients_yaml_cmd_retries
      ignore_errors: true
      when:
        - num_failed_hosts.stdout_lines[0] | int > 0
        - re_register_failed_hosts is defined and re_register_failed_hosts
...
