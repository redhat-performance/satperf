---
- hosts: container_hosts
  remote_user: root
  gather_facts: no
  vars_files:
    - ../../conf/satperf.yaml
    - ../../conf/satperf.local.yaml
  vars:
    method: "clients.yaml"
    size: 10   # TODO: would be nice to provide total expected number and that would be divided by number of container hosts
    resting: 0
    registration_logs: "registration_logs"
  tasks:
    - name: "Load number of already registered containers"
      command:
        cat /root/container-used-count
      register: containers_used_count_cmd
      ignore_errors: true

    - name: "Set number of used containers to 0"
      set_fact:
        containers_used_count: 0
      when: "containers_used_count_cmd.failed"

    - name: "Set number of used containers based on file"
      set_fact:
        containers_used_count: "{{ containers_used_count_cmd.stdout|int }}"   # Warning: this is still string: https://github.com/ansible/ansible/issues/15249
      when: "not containers_used_count_cmd.failed"

    - name: "Ensure we have enough free containers"
      assert:
        that: "containers_used_count|int + size|int <= containers_count|int"

    - name: "Generate list of containers we are going to use"
      shell:
        head -n "{{ containers_used_count|int + size|int }}" /root/container-ips.shuffled | tail -n "{{ size }}" | cut -d ' ' -f 2 > clients.ini

    - name: "Determine log name"
      set_fact:
        clients_yaml_cmd_log: "/root/out-{{ lookup('pipe', 'date --utc --iso-8601=seconds') | regex_replace('[^A-Za-z0-9-]', '_') }}.log"
      run_once: yes

    - name: "Download host registration script from Satellite"
      ansible.builtin.get_url:
        url: http://{{ groups['satellite6'] | first }}/pub/host-registration_{{ tests_registration_target }}.sh
        dest: /root/clients_host-registration.sh
      when: "method == 'clients_host-registration'"

    - name: "Run clients_host-registration.yaml (log = {{ clients_yaml_cmd_log }})"
      shell: |
        ansible-playbook \
          --private-key /root/id_rsa_key \
          --forks "{{ size }}" \
          -i clients.ini \
          clients_host-registration.yaml \
          &> "{{ clients_yaml_cmd_log }}"
      register: clients_yaml_cmd
      ignore_errors: true
      when: "method == 'clients_host-registration'"

    - name: "Run clients.yaml (log = {{ clients_yaml_cmd_log }})"
      shell: |
        ansible-playbook \
          --private-key /root/id_rsa_key \
          --forks "{{ size }}" \
          -i clients.ini \
          -e "server={{ groups['satellite6']|first }}" \
          -e "activationkey='ActivationKey'" \
          -e "organization='{{ sat_orglabel }}'" \
          -e "config_server_server_timeout='{{ config_server_server_timeout|default('') }}'" \
          clients.yaml \
          &> "{{ clients_yaml_cmd_log }}"
      register: clients_yaml_cmd
      ignore_errors: true
      when: "method == 'clients.yaml'"

    - name: "Run clients-register.yaml (log = {{ clients_yaml_cmd_log }})"
      shell: |
        ansible-playbook \
          --private-key /root/id_rsa_key \
          --forks "{{ size }}" \
          -i clients.ini \
          -e "server={{ groups['satellite6']|first }}" \
          -e "sat_user={{ sat_user }}" \
          -e "sat_pass={{ sat_pass }}" \
          -e "activationkey='ActivationKey'" \
          -e "organization='{{ sat_orglabel }}'" \
          clients-register.yaml \
          &> "{{ clients_yaml_cmd_log }}"
      register: clients_yaml_cmd
      ignore_errors: true
      when: "method == 'clients-register.yaml'"

    - name: "Run clients-bootstrap.yaml (log = {{ clients_yaml_cmd_log }})"
      shell: |
        ansible-playbook \
          --private-key /root/id_rsa_key \
          --forks "{{ size }}" \
          -i clients.ini \
          -e "server={{ groups['satellite6']|first }}" \
          -e "user={{ sat_user }}" \
          -e "pass={{ sat_pass }}" \
          -e "activationkey='ActivationKey'" \
          -e "organization='{{ sat_org }}'" \
          -e "location='{{ sat_location }}'" \
          -e "hostgroup='{{ registration_hostgroup }}'" \
          clients-bootstrap.yaml \
          &> "{{ clients_yaml_cmd_log }}"
      register: clients_yaml_cmd
      ignore_errors: true
      when: "method == 'clients-bootstrap.yaml'"

    - name: "Fetch client logs"
      fetch:
        src: "{{ clients_yaml_cmd_log }}"
        dest: "{{ registration_logs }}"
      ignore_errors: true

    - name: "Get how long registration took"
      shell:
        grep '"msg". "Register' "{{ clients_yaml_cmd_log }}" | cut -d '"' -f 4
      register: clients_yaml_grepper_timings

    - name: "Append registration timings to central list"
      set_fact:
        grepper_times: "{{ grepper_times|default([]) + hostvars[item]['clients_yaml_grepper_timings']['stdout_lines'] }}"
      with_items: "{{ ansible_play_batch }}"
      run_once: true

    - name: "Show how long registration took"
      debug:
        var: grepper_times
      run_once: true

    - name: "Show number of successful registration events"
      debug:
        var: grepper_times|length
      run_once: true

    - name: "Increment number of already registered containers"
      lineinfile:
        path: /root/container-used-count
        regexp: .*
        line: "{{ containers_used_count|int + size|int }}"
        create: yes

    - name: "Give server some time to rest"
      pause:
        seconds: "{{ resting }}"
...
