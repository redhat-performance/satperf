---
# RHEL8 requirements
- name: "Enable satellite-capsule:el8 module"
  command: dnf -y module enable satellite-capsule:el8
  when: "ansible_distribution_major_version|int == 8"
  
# Install packages required for capsule
- name: "Install capsule package"
  yum:
    name: "satellite-capsule"
    state: present

# Prepare for capsule installation
- name: "Run capsule-certs-generate"
  shell:
    "capsule-certs-generate --foreman-proxy-fqdn {{ item }} --certs-tar /var/www/html/pub/{{ item }}-certs.tar >/var/www/html/pub/{{ item }}-out.raw"
  delegate_to: "{{ groups['satellite6']|first }}"
  run_once: true
  with_items: "{{ groups['capsules'] }}"
  # Output of this command looks like this:
  # # capsule-certs-generate --capsule-fqdn capsule.example.com --certs-tar aaa.tar
  # Installing             Done                                               [100%] [..........]
  #   Success!
  # 
  #   To finish the installation, follow these steps:
  # 
  #   1. Ensure that the foreman-installer-katello package is installed on the system.
  #   2. Copy aaa.tar to the system capsule.example.com
  #   3. Run the following commands on the capsule (possibly with the customized
  #      parameters, see foreman-installer --scenario capsule --help and
  #      documentation for more info on setting up additional services):
  # 
  #   yum -y localinstall http://sat.example.com/pub/katello-ca-consumer-latest.noarch.rpm
  #   subscription-manager register --org "Default_Organization"
  #   satellite-installer --scenario capsule\
  #                       --parent-fqdn                         "sat.example.com"\
  #                       --register-in-foreman                 "true"\
  #                       --foreman-base-url                    "https://sat.example.com"\
  #                       --trusted-hosts                       "sat.example.com"\
  #                       --trusted-hosts                       "capsule.example.com"\
  #                       --oauth-consumer-key                  "ZpFxdhmWhArPmdV5dXn98uuZZzqEMJxc"\
  #                       --oauth-consumer-secret               "4xaW6ZvyP8sJeHyhehEhzt7nspDq6k3W"\
  #                       --pulp-oauth-secret                   "waQ9uU4HGrtfbAgcTFzqHASCqwJMx9qi"\
  #                       --certs-tar                           "aaa.tar"
  #   The full log is at /var/log/capsule-certs-generate.log

- name: "Download tarball created by capsule-certs-generate"
  get_url:
    url: "http://{{ groups['satellite6']|first }}/pub/{{ inventory_hostname }}-certs.tar"
    dest: "/root/{{ inventory_hostname }}-certs.tar"
    force: yes

- name: "Download output produced by capsule-certs-generate"
  get_url:
    url: "http://{{ groups['satellite6']|first }}/pub/{{ inventory_hostname }}-out.raw"
    dest: "/root/{{ inventory_hostname }}-out.raw"
    force: yes

- name: "Get only commands we need to run"
  ansible.builtin.shell: |
    sed 's/\x1B\[[0-9;]*[JKmsu]//g' "/root/{{ inventory_hostname }}-out.raw" \
      | grep \
        -e '^\s\+satellite-installer\s*' \
        -e '^\s\+foreman-installer\s*' \
        -e '^\s\+capsule-installer\s*' \
        -e '^\s\+--' \
      | sed 's|\(^\s\+--certs-tar\s\+"\).*$|\1/root/{{ inventory_hostname }}-certs.tar"\\|' \
      > "/root/{{ inventory_hostname }}-script.sh"

- name: "Fix certificate tarball path"
  shell:
    sed -i 's|/var/www/html/pub/{{ inventory_hostname }}-certs.tar|/root/{{ inventory_hostname }}-certs.tar|' "/root/{{ inventory_hostname }}-script.sh"

# Make sure remote execution plugin is enabled
# https://bugzilla.redhat.com/show_bug.cgi?id=1402240
- name: "Make sure remote execution plugin is enabled on Satellite <=6.11"
  lineinfile:
    dest: "/root/{{ inventory_hostname }}-script.sh"
    line: '                    --enable-foreman-proxy-plugin-remote-execution-ssh\'
    insertafter: '.*--scenario capsule.*'
  when: "sat_version is version('6.11', '<=')"

- name: "Make sure remote execution plugin is enabled on Satellite >=6.12"
  lineinfile:
    dest: "/root/{{ inventory_hostname }}-script.sh"
    line: '                    --enable-foreman-proxy-plugin-remote-execution-script\'
    insertafter: '.*--scenario capsule.*'
  when: "sat_version is version('6.12', '>=')"

- name: "Configure MQTT transport for remote execution on Satellite >=6.12"
  lineinfile:
    dest: "/root/{{ inventory_hostname }}-script.sh"
    line: '                    --foreman-proxy-plugin-remote-execution-script-mode=pull-mqtt\'
    insertafter: '.*--enable-foreman-proxy-plugin-remote-execution-script'
  when:
    - sat_version is version('6.12', '>=')
    - hostvars[inventory_hostname].rex_mode is defined and hostvars[inventory_hostname].rex_mode == 'mqtt'

- name: "Make sure Ansible plugin is enabled"
  lineinfile:
    dest: "/root/{{ inventory_hostname }}-script.sh"
    line: '                    --enable-foreman-proxy-plugin-ansible\'
    insertafter: '.*--scenario capsule.*'

# Finally install capsule
- name: "Run Capsule configuration"
  command:
    bash "/root/{{ inventory_hostname }}-script.sh"
  environment:
    LANG: "en_US.UTF-8"
    LC_ALL: "en_US.UTF-8"
  register: configuration

- name: "Show Capsule configuration output"
  ansible.builtin.debug:
    var: configuration.stdout_lines

- name: "Print capsule installer run duration"
  debug:
    msg: "SatelliteInstallerScenarioCapsule {{ configuration.start }} to {{ configuration.end }}"

- name: "Workaround for: Bug 2132774 - On its default configuration mosquitto cannot accept more than 1014 clients"
  ansible.builtin.copy:
    dest: /etc/systemd/system/mosquitto.service.d/limits.conf
    content: |
      [Service]
      LimitNOFILE=10000
  when:
    - sat_version is version('6.12', '>=')
    - hostvars[inventory_hostname].rex_mode is defined and hostvars[inventory_hostname].rex_mode == 'mqtt'

- name: Restart mosquitto service unit
  ansible.builtin.systemd:
    name: mosquitto
    daemon_reload: yes
    state: restarted
  when:
    - sat_version is version('6.12', '>=')
    - hostvars[inventory_hostname].rex_mode is defined and hostvars[inventory_hostname].rex_mode == 'mqtt'
...
